name: CMake Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  BUILD_TYPE: Debug

jobs:
  # --- START OF NEW WINDOWS BUILD JOB ---
  build-win:
    # Removed 'needs: build-linux' as Windows build usually doesn't depend on Linux build completion.
    # If they are truly independent, removing 'needs' can speed up parallel execution.
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    # On Windows, apt-get is not used for build dependencies.
    # - name: Install Build Dependencies
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y build-essential libgl-dev # Essential build tools and OpenGL libs

    - name: Install Qt
      id: install-qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.3' # <--- CHANGE TO STABLE VERSION FOR CONSISTENCY
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia qtpdf' # <--- ADD qtpdf if used, keep qtmultimedia
        tools: 'tools_ifw'
        install-deps: "true"

    - name: Configure MSVC
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Configure CMake
      run: cmake -S . -B ${{github.workspace}}/build

    - name: Build
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload Release (Tag Push - Final Release)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist.zip
          qff_installer.exe
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Draft Release (Untagged Push)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: "Development Build - ${{ github.sha }}"
        tag_name: "dev"
        files: |
          dist.zip
          qff_installer.exe
        draft: true
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # --- END OF NEW WINDOWS BUILD JOB ---

  # --- START OF NEW LINUX BUILD JOB ---
  build-linux:
    runs-on: ubuntu-latest # Or debian-latest for more control

    steps:
    - uses: actions/checkout@v3

    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl-dev # Essential build tools and OpenGL libs

    - name: Install Qt
      id: install-qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.3'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64' # Common Linux GCC architecture
        modules: 'qtbase qtmultimedia qtpdf' # <--- EXPLICITLY ADD 'qtbase' and 'qtpdf'
        tools: 'tools_ifw' # If you plan to build Linux installers with IFW
        install-deps: "true" # Installs Qt runtime dependencies

    - name: Configure CMake
      # For Linux, it's common to explicitly set the build type to Release for deployed artifacts
      run: cmake -S . -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run CPack (Optional -> If you want to create installers/packages)
      run: cmake --build ${{github.workspace}}/build --target package
      working-directory: ${{github.workspace}}/build # CPack usually runs from build directory

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Package Linux Application
      run: |
        cd ${{github.workspace}}/build
        mkdir staged_app
        cp -r bin/your_app_executable staged_app/
        tar -czvf dist_linux.tar.gz -C . staged_app
      working-directory: ${{github.workspace}}/build

    - name: Upload Linux Release (Tag Push - Final Release)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{github.workspace}}/build/dist_linux.tar.gz
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux Draft Release (Untagged Push)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: "Development Build - ${{ github.sha }}"
        tag_name: "dev-linux"
        files: |
          ${{github.workspace}}/build/dist_linux.tar.gz
        draft: true
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # --- END OF NEW LINUX BUILD JOB ---