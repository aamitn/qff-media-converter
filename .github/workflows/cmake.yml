
name: CMake Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]    
  pull_request:  
    branches: [ "main" ]

permissions:
  contents: write

env:
  BUILD_TYPE: Release

jobs:

  # ... (other jobs remain the same) ...

  # --- START OF NEW MACOS BUILD JOB ---
  build-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Qt
      id: install-qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.9.1'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        modules: 'qtmultimedia'
        tools: 'tools_ifw'

    - name: Configure CMake
      run: cmake -S . -B ${{github.workspace}}/build 

    - name: Build
      run: cmake --build ${{github.workspace}}/build 

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Export Qt Binaries to PATH
      run: |
        QT_BIN_DIR=$(find $(echo $QT_ROOT_DIR) -name "bin" -type d)
        echo "QT_BIN_DIR: $QT_BIN_DIR"
        echo "PATH=$QT_BIN_DIR:$PATH" >> $GITHUB_ENV

    - name: Copy .app bundle for separate upload (using rsync for robustness)
      run: |
        APP_SOURCE_PATH="${{github.workspace}}/build/qffgui.app"
        APP_BUNDLE_PATH="${{github.workspace}}/build/qffgui_bundle.app"

        echo "Contents of ${{github.workspace}}/build/ before copying:"
        ls -la "${{github.workspace}}/build/"
        
        # Ensure the source .app exists before copying
        if [ ! -d "${APP_SOURCE_PATH}" ]; then
          echo "Error: qffgui.app not found at ${APP_SOURCE_PATH}. Cannot create bundle copy."
          exit 1
        fi
        
        # Use rsync for a more robust recursive copy, ensuring independent files
        # -a: archive mode (preserves permissions, timestamps, etc.)
        # -v: verbose
        rsync -av "${APP_SOURCE_PATH}/" "${APP_BUNDLE_PATH}"
        
        echo "Copied ${APP_SOURCE_PATH} to ${APP_BUNDLE_PATH}"
        
        echo "Contents of ${{github.workspace}}/build/ after copying:"
        ls -la "${{github.workspace}}/build/"

    - name: Deploy macOS Application (generate dmg using macdeployqt)
      run: |
        echo "Contents of ${{github.workspace}}/build/ before macdeployqt -dmg:"
        ls -la "${{github.workspace}}/build/"
        
        # Run macdeployqt on the original .app, which will then create the DMG and remove the original .app
        macdeployqt "${{github.workspace}}/build/qffgui.app" -dmg -qmldir="${{github.workspace}}/"
        
        echo "Contents of ${{github.workspace}}/build/ after macdeployqt -dmg:"
        ls -la "${{github.workspace}}/build/" # qffgui.app should be gone, qffgui_bundle.app should remain

    - name: Verify files before upload (corrected checks)
      run: |
        echo "Final check of files in build directory before upload:"
        ls -la ${{github.workspace}}/build/
        
        # Correct check for DMG: use find or glob
        DMG_COUNT=$(find ${{github.workspace}}/build/ -maxdepth 1 -name "*.dmg" | wc -l | tr -d '[:space:]')
        if [ "$DMG_COUNT" -gt 0 ]; then
          echo "DMG file(s) found: $DMG_COUNT"
        else
          echo "DMG file NOT found."
        fi
        
        # Correct check for .app bundle
        if [ -d "${{github.workspace}}/build/qffgui_bundle.app" ]; then
          echo "qffgui_bundle.app found."
        else
          echo "qffgui_bundle.app NOT found."
        fi

    - name: Upload Release (Tag Push - Final Release)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{github.workspace}}/build/*.dmg
          ${{github.workspace}}/build/CMakeCache.txt
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Draft Release (Untagged Push)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: "Development Build - ${{ github.sha }}"
        tag_name: "dev"
        files: |
          ${{github.workspace}}/build/*.dmg
          ${{github.workspace}}/build/CMakeCache.txt
        draft: true
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # --- END OF NEW MACOS BUILD JOB ---